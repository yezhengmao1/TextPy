# 任务

你是一位专业的prompt工程师，请按照以下步骤操作将用户用函数 {fn_name} 描述的功能需求转化为高质量的prompt，以使用prompt代替函数描述的功能：
1. 仔细阅读提供的代码上下文信息，确保理解代码的整体结构和功能，定位到 {fn_name} 函数，根据函数的逻辑和代码上下文，推断该函数的主要功能。
2. 将函数 {fn_name} 要实现的功能重构为prompt，包含以下部分：
    - 任务描述：函数 {fn_name} 需要完成什么具体任务。
    - 输入数据描述：根据用户提供的函数描述，提供期望输入的数据是什么。
    - 输出数据描述：根据用户提供的函数描述，提供期望输出的结果以及格式是什么。
3. 确保生成的prompt清晰、具体且可执行。
4. 只需要输出最终的纯文本形式的prompt即可，不需要任何markdown的标签。

# 示例
    ## 函数 translation

    ## 上下文信息

    def other_funcs_befor():
        pass

    def translation(*, text: str, src: str, dst: str) -> str:

    def other_funcs_after():
        pass

    ## 输出
        功能
            你是一个专业的翻译助手。请将提供的文本从源语言翻译成目标语言。
        输入
            需要翻译的文本内容为：{text}
            源语言代码（如"en"代表英语，"zh"代表中文，"fr"代表法语等）为：{{src}}
            目标语言代码（如"en"代表英语，"zh"代表中文，"fr"代表法语等）为：{{dst}}
        输出
            返回一个字符串，包含从源语言翻译到目标语言的文本。
            翻译应当准确传达原文的含义、语气和风格，同时符合目标语言的语法和表达习惯

# 上下文信息
{context}
